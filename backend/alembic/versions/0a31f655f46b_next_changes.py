"""next changes

Revision ID: 0a31f655f46b
Revises: 002_comprehensive
Create Date: 2025-10-27 19:29:54.610410

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0a31f655f46b'
down_revision: Union[str, None] = '002_comprehensive'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('account', 'access_token_expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('account', 'refresh_token_expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('account', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('account', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.add_column('analysis_jobs', sa.Column('user_id', sa.Text(), nullable=True))
    op.add_column('analysis_jobs', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('analysis_jobs', sa.Column('user_prompt', sa.Text(), nullable=True))
    op.add_column('analysis_jobs', sa.Column('ocr_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('analysis_jobs', sa.Column('text_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('analysis_jobs', sa.Column('image_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('analysis_jobs', sa.Column('critique', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('analysis_jobs', sa.Column('master_prompt', sa.Text(), nullable=True))
    op.add_column('analysis_jobs', sa.Column('generated_image_url', sa.String(), nullable=True))
    op.create_foreign_key(None, 'analysis_jobs', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    op.alter_column('canvas', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('canvas', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('session', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('session', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('session', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_constraint(op.f('session_token_unique'), 'session', type_='unique')
    op.create_index(op.f('ix_session_token'), 'session', ['token'], unique=True)
    op.alter_column('user', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('user', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_constraint(op.f('user_email_unique'), 'user', type_='unique')
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.alter_column('verification', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('verification', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('verification', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('verification', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('verification', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('verification', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.create_unique_constraint(op.f('user_email_unique'), 'user', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('user', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('user', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_index(op.f('ix_session_token'), table_name='session')
    op.create_unique_constraint(op.f('session_token_unique'), 'session', ['token'], postgresql_nulls_not_distinct=False)
    op.alter_column('session', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('session', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('session', 'expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('canvas', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('canvas', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_constraint(None, 'analysis_jobs', type_='foreignkey')
    op.drop_column('analysis_jobs', 'generated_image_url')
    op.drop_column('analysis_jobs', 'master_prompt')
    op.drop_column('analysis_jobs', 'critique')
    op.drop_column('analysis_jobs', 'image_analysis')
    op.drop_column('analysis_jobs', 'text_analysis')
    op.drop_column('analysis_jobs', 'ocr_results')
    op.drop_column('analysis_jobs', 'user_prompt')
    op.drop_column('analysis_jobs', 'updated_at')
    op.drop_column('analysis_jobs', 'user_id')
    op.alter_column('account', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('account', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('account', 'refresh_token_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('account', 'access_token_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    # ### end Alembic commands ###

